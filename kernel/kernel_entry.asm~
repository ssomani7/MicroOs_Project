[ bits 32 ]
[ extern main ]
call main
jmp $

global gdt_flush     ; Allows the C code to link to this
extern gp            ; Says that '_gp' is in another file
gdt_flush:
    lgdt [gp]        ; Load the GDT with our '_gp' which is a special pointer
    mov ax, 0x10      ; 0x10 is the offset in the GDT to our data segment
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax
    jmp 0x08:flush2   ; 0x08 is the offset to our code segment: Far jump!
flush2:
    ret               ; Returns back to the C code!

global idt_load
extern idtp
idt_load:
    lidt [idtp]
ret


global _isr0
global _isr1
global _isr2
global _isr3
global _isr4
global _isr5
global _isr6
global _isr7  
global _isr8
global _isr9
global _isr10
global _isr11
global _isr12
global _isr13
global _isr14
global _isr15           ; Fill in the rest here!
global _isr16
global _isr17
global _isr18
global _isr19
global _isr20
global _isr21
global _isr22
global _isr23
global _isr24
global _isr25 
global _isr26
global _isr27
global _isr28
global _isr29
global _isr30
global _isr31


;  0: Divide By Zero Exception
_isr0:
    cli
    push byte 0    ; A normal ISR stub that pops a dummy error code to keep a
                   ; uniform stack frame
    push byte 0
    jmp isr_common_stub

;  1: Debug Exception
_isr1:
    cli
    push byte 0
    push byte 1
    jmp isr_common_stub
    
_isr2:
    cli
    push byte 0
    push byte 2
    jmp isr_common_stub
    
_isr3:
    cli
    push byte 0
    push byte 3
    jmp isr_common_stub
    
_isr4:
    cli
    push byte 0
    push byte 4
    jmp isr_common_stub
    
_isr5:
    cli
    push byte 0
    push byte 5
    jmp isr_common_stub
    
_isr6:
    cli
    push byte 0
    push byte 6
    jmp isr_common_stub
    
_isr7:
    cli
    push byte 0
    push byte 7
    jmp isr_common_stub
    
    

;  8: Double Fault Exception (With Error Code!)
_isr8:
    cli
    push byte 8       
    jmp isr_common_stub
    
    
;  9: Double Fault Exception (With Error Code!)
_isr9:
    cli
    push byte 0
    push byte 9
    jmp isr_common_stub
    
;  8: Double Fault Exception (With Error Code!)
_isr8:
    cli
    push byte 8       
    jmp isr_common_stub



...                ; You should fill in from _isr9 to _isr31 here. Remember to
                   ; use the correct stubs to handle error codes and push dummies!


extern _fault_handler

; This is our common ISR stub. It saves the processor state, sets
; up for kernel mode segments, calls the C-level fault handler,
; and finally restores the stack frame.
isr_common_stub:
    pusha
    push ds
    push es
    push fs
    push gs
    mov ax, 0x10   ; Load the Kernel Data Segment descriptor!
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov eax, esp   ; Push us the stack
    push eax
    mov eax, _fault_handler
    call eax       ; A special call, preserves the 'eip' register
    pop eax
    pop gs
    pop fs
    pop es
    pop ds
    popa
    add esp, 8     ; Cleans up the pushed error code and pushed ISR number
    iret           ; pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP!
		
